import xgboost as xgb
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

iris = load_iris()

iris_data = pd.DataFrame(iris.data, columns=iris.feature_names)
iris_target = pd.Series(iris.target)

train_x, test_x, train_y, test_y = train_test_split(iris_data, iris_target, test_size=0.2, shuffle=True)

dtrain = xgb.DMatrix(train_x, label=train_y)
dtest = xgb.DMatrix(test_x, label=test_y)
#dtrain = xgb.DMatrix(train_x, label=train_y) #pandasのまま書いてみる

#param = {'max_depth': 2, 'eta': 1, 'objective': 'multi:softmax', 'num_class': 3}

evals = [(dtrain, 'train'), (dtest, 'eval')]
evals_result = {}
score_list = []
params_list = []
num_round = 1000
max_depth_list = [2,4,6,8,10,12]
for max_depth in max_depth_list:
  param = {'max_depth': max_depth, 'eta': 1, 'objective': 'multi:softmax', 'num_class': 3}
  bst = xgb.train(param,
                  dtrain,
                  num_boost_round=num_round,
                  early_stopping_rounds=10,
                  evals=evals,
                  evals_result=evals_result)
  pred_train = bst.predict(dtrain)
  score_list.append(accuracy_score(train_y, pred_train))
  params_list.append(param)

max_score = max(score_list)
max_param = params_list[score_list.index(max_score)]

bst = xgb.train(max_param,
                dtrain,
                num_boost_round=num_round,
                early_stopping_rounds=10,
                evals=evals,
                evals_result=evals_result)

pred_train = bst.predict(dtrain)
pred_test = bst.predict(dtest)
plt.scatter(train_y, pred_train)
plt.scatter(test_y, pred_test)
