import xgboost as xgb
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import sys
from bayes_opt import BayesianOptimization
import numpy as np
from xgboost import XGBRegressor
from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler


iris = load_iris()

#iris_data = pd.DataFrame(iris.data, columns=iris.feature_names)
#iris_target = pd.Series(iris.target)
#train_x, test_x, train_y, test_y = train_test_split(iris_data, iris_target, test_size=0.2, shuffle=True)

url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'
column_names = ['MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight',
                'Acceleration', 'Model Year', 'Origin']

raw_dataset = pd.read_csv(url, names=column_names,
                          na_values='?', comment='\t',
                          sep=' ', skipinitialspace=True)
dataset = raw_dataset.copy()
dataset = dataset.dropna()
dataset['Origin'] = dataset['Origin'].map({1: 'USA', 2: 'Europe', 3: 'Japan'})
dataset = pd.get_dummies(dataset, columns=['Origin'], prefix='', prefix_sep='')


#print(dataset)
train_dataset = dataset.sample(frac=0.8, random_state=0)
test_dataset = dataset.drop(train_dataset.index)

train_x_arrays = train_dataset.copy()
test_x_arrays = test_dataset.copy()

train_y_arrays = np.array(train_x_arrays.pop('MPG')).reshape(-1, 1).astype(int)
test_y_arrays = np.array(test_x_arrays.pop('MPG')).reshape(-1, 1).astype(int)




ms = StandardScaler()
train_x_std = ms.fit_transform(train_x_arrays).astype(int)
test_x_std = ms.fit_transform(test_x_arrays).astype(int)

model = SVC(kernel='linear',random_state=0)
print(train_x_std)
print(train_y_arrays)
# モデルの学習。fit関数で行う。
model.fit(train_x_std, train_y_arrays)

pred_train = model.predict(train_x_std)
pred_test = model.predict(test_x_std)
plt.scatter(train_y_arrays, pred_train)
plt.scatter(test_y_arrays, pred_test)
